setDT(tab, keep.rownames=TRUE)
tab
fwrite(tab, file=file.path(de.output, "DE_sunitinib.vs.placebo.xls")), sep="\t")#
up <- tab[adj.P.Val < sig.level & logFC>0,  ENTREZID]#
down <- tab[adj.P.Val < sig.level & logFC<0,  ENTREZID]
fwrite(tab, file=file.path(de.output, "DE_sunitinib.vs.placebo.xls"))#
up <- tab[adj.P.Val < sig.level & logFC>0,  ENTREZID]#
down <- tab[adj.P.Val < sig.level & logFC<0,  ENTREZID]
# output folder #
egsea.output <- file.path(gsa.output, paste0("egsea_",format(Sys.time(), '%Y%m%d%H%M')))#
if (!file.exists(egsea.output)) dir.create(egsea.output)#
#
#dat #
dat <- exprs(eset.main)#
colnames(dat) <- gsub("_\\(HTA-2_0\\)\\.CEL", "", colnames(dat))#
probe.annots <- fData(eset.main)#
colnames(probe.annots) <- c("ProbeID", "EntrezID", "Symbol", "Genename")#
#
# build index#
gs.annots <- buildIdx(entrezIDs=unique(probe.annots[,2]), species="human", msigdb.gsets="none", kegg.updated=FALSE, kegg.exclude = c("Metabolism")) #
#
# run EGSEA#
#g <- "PDL1.score"#
#grp <- factor(paste0("grp",sampleinfo[, get(g)]))#
design <- model.matrix(~0+grp)
design
colnames(design) <- levels(grp)
design
contrast.matrix <- makeContrasts(Sunitinib-Placebo,#
                                 levels=design)
egsea.res <- egsea.ma(expr = dat, #
                    group = grp, #
                    probe.annot = probe.annots, #
                    probeMap.method = "avg", #
                    design = design,#
                    contrasts = contrast.matrix, #
                    gs.annots = gs.annots, #
                    baseGSEAs = egsea.base(),#
                    display.top = 20,#
                    verbose = TRUE,#
                    report = TRUE,#
                    report.dir = egsea.output)
?buildIdx
egsea.output <- file.path(gsa.output, paste0("egsea_",format(Sys.time(), '%Y%m%d%H%M')))#
if (!file.exists(egsea.output)) dir.create(egsea.output)#
#
#dat #
dat <- exprs(eset.main)#
colnames(dat) <- gsub("_\\(HTA-2_0\\)\\.CEL", "", colnames(dat))#
probe.annots <- fData(eset.main)#
colnames(probe.annots) <- c("ProbeID", "EntrezID", "Symbol", "Genename")
gs.annots <- buildIdx(entrezIDs=unique(probe.annots[,2]), species="human", msigdb.gsets = c("h", "c5"), go.part = TRUE)
design <- model.matrix(~0+grp)#
colnames(design) <- levels(grp)#
contrast.matrix <- makeContrasts(Sunitinib-Placebo,#
                                 levels=design)#
#
egsea.res <- egsea.ma(expr = dat, #
                    group = grp, #
                    probe.annot = probe.annots, #
                    probeMap.method = "avg", #
                    design = design,#
                    contrasts = contrast.matrix, #
                    gs.annots = gs.annots, #
                    baseGSEAs = egsea.base(),#
                    display.top = 20,#
                    verbose = TRUE,#
                    report = TRUE,#
                    report.dir = egsea.output)
egsea.output <- file.path(gsa.output, paste0("egsea_",format(Sys.time(), '%Y%m%d%H%M')))#
if (!file.exists(egsea.output)) dir.create(egsea.output)#
#
#dat #
dat <- exprs(eset.main)#
colnames(dat) <- gsub("_\\(HTA-2_0\\)\\.CEL", "", colnames(dat))#
probe.annots <- fData(eset.main)#
colnames(probe.annots) <- c("ProbeID", "EntrezID", "Symbol", "Genename")
gs.annots <- buildIdx(entrezIDs=unique(probe.annots[,2]), species="human", msigdb.gsets = c("h", "c6"))#
#
# run EGSEA#
#g <- "PDL1.score"#
#grp <- factor(paste0("grp",sampleinfo[, get(g)]))#
design <- model.matrix(~0+grp)#
colnames(design) <- levels(grp)#
contrast.matrix <- makeContrasts(Sunitinib-Placebo,#
                                 levels=design)#
#
egsea.res <- egsea.ma(expr = dat, #
                    group = grp, #
                    probe.annot = probe.annots, #
                    probeMap.method = "avg", #
                    design = design,#
                    contrasts = contrast.matrix, #
                    gs.annots = gs.annots, #
                    baseGSEAs = egsea.base(),#
                    display.top = 20,#
                    verbose = TRUE,#
                    report = TRUE,#
                    report.dir = egsea.output)
egsea.top <- topSets(egsea.res, contrast=1, number=Inf, names.only=FALSE)#
setDT(egsea.top, keep.rownames=TRUE)
# format#
egsea.top[, label_y := ifelse(direction=="Down", 0.2, -0.2)]#
egsea.top[, label_hjust := ifelse(direction=="Down", 0, 1)]#
egsea.top[, log10padj := -log10(p.adj) * ifelse(direction=="Down", -1, 1)]#
ylim <- round((round(max(abs(egsea.top$log10padj)))+5/2)/5)*5#
g <- ggplot(egsea.top[p.adj < 0.01 & significance >= boxplot.stats(significance)$stats[5]], aes(x = reorder(rn, log10padj), y = log10padj, fill = direction)) +#
    geom_bar(stat = "identity", color = "black") +#
    geom_text(aes(y = label_y, label = rn, hjust = label_hjust)) +#
    coord_flip() +#
    theme_minimal() +#
    theme(axis.text.y = element_blank(),#
        axis.ticks.y = element_blank(),#
        axis.title.y = element_blank(),#
        legend.position = "top",#
        legend.justification = 0.05,#
        legend.title = element_blank(),#
        panel.grid.major.y = element_blank(),#
        panel.grid.minor.y = element_blank(),#
        panel.grid.major.x = element_line(colour = "grey80", linetype = "dashed"),#
        panel.grid.minor.x = element_blank()) +#
        scale_y_continuous(expression(-log[10](italic("padj"))), limits = c(-ylim, ylim), breaks = seq(-ylim, ylim, 5), labels= abs(seq(-ylim, ylim, by=5)))
g
?topSets
egsea.top <- topSets(egsea.res, gs.label = "c6", contrast=1, number=Inf, names.only=FALSE)#
setDT(egsea.top, keep.rownames=TRUE)
egsea.top[, label_y := ifelse(direction=="Down", 0.2, -0.2)]#
egsea.top[, label_hjust := ifelse(direction=="Down", 0, 1)]#
egsea.top[, log10padj := -log10(p.adj) * ifelse(direction=="Down", -1, 1)]#
ylim <- round((round(max(abs(egsea.top$log10padj)))+5/2)/5)*5#
g <- ggplot(egsea.top[p.adj < 0.01 & significance >= boxplot.stats(significance)$stats[5]], aes(x = reorder(rn, log10padj), y = log10padj, fill = direction)) +#
    geom_bar(stat = "identity", color = "black") +#
    geom_text(aes(y = label_y, label = rn, hjust = label_hjust)) +#
    coord_flip() +#
    theme_minimal() +#
    theme(axis.text.y = element_blank(),#
        axis.ticks.y = element_blank(),#
        axis.title.y = element_blank(),#
        legend.position = "top",#
        legend.justification = 0.05,#
        legend.title = element_blank(),#
        panel.grid.major.y = element_blank(),#
        panel.grid.minor.y = element_blank(),#
        panel.grid.major.x = element_line(colour = "grey80", linetype = "dashed"),#
        panel.grid.minor.x = element_blank()) +#
        scale_y_continuous(expression(-log[10](italic("padj"))), limits = c(-ylim, ylim), breaks = seq(-ylim, ylim, 5), labels= abs(seq(-ylim, ylim, by=5)))
g
BiocManager::install()
BiocManager::install("magick")
q()
#------- library ------##
library(oligo)#
library(affycoretools)#
library(hta20transcriptcluster.db)#
library(data.table)#
library(limma)#
library(compareGroups)#
library(fastICA)#
library(ade4)#
library(EGSEA)#
library(EnhancedVolcano)#
#
# generate contrast names#
contr.fact <- function(xvar, sinfo) {#
    if (!is.character(xvar)) stop("xvar must be a character string.")#
    ind <- match(xvar, colnames(sinfo))#
    if (is.na(ind)) stop(cat(xvar, "not found in", sinfo, ".\n"))#
    fact <- factor(data.frame(sinfo)[,xvar]) #
    l <- levels(fact)#
    nl <- nlevels(fact)#
    #tmp <- apply(combn(nl,2), 2, function(x) c(l[x[2]], l[x[1]]))#
    tmp <- data.frame(rbind(xvar, apply(combn(nl, 2, function(x) l[x]), 2, rev)))#
    colnames(tmp) <- paste0("contrast", 1:ncol(combn(nl,2)))#
    return(tmp)#
}#
#
#------- bubble plot -------##
fct <- function(path2file, sig.level=0.01) {#
    tmp <- data.table::fread(path2file)#
	tmp2 <- tmp[Benjamini<sig.level, c("Category", "Term", "PValue", "Count", "%", "Benjamini")]#
	tmp2[, `:=`(Condition=gsub("CTRLvs|_up|_down|.xls", "", basename(path2file)), side=ifelse(grepl("_up", basename(path2file)), "up", "down"))]#
	return(tmp2)#
}#
#
fct2 <- function(path2file, sig.level=0.01) {#
    tmp <- data.table::fread(path2file)#
	tmp2 <- tmp[Benjamini<sig.level, c("Category", "Term", "PValue", "Genes")]#
	tmp2[, `:=`(Condition=gsub("CTRLvs|_up|_down|.xls", "", basename(path2file)), side=ifelse(grepl("_up", basename(path2file)), "up", "down"))]#
	return(tmp2)#
}#
#
# #
mapProbesIntoEntrezIDs <- function (elist, probe.annot, probeMap.method) {#
    ezs = unique(probe.annot[, 2])#
    sel = c()#
    for (ez in ezs) {#
        reps = which(probe.annot[, 2] == ez)#
        if (length(reps) > 1) {#
            if (probeMap.method == "avg") #
                exprs = rowMeans(elist$E[reps, ])#
            else if (probeMap.method == "med") #
                exprs = sapply(1:length(reps), function(x) median(elist$E[reps[x], #
                  ]))#
            else if (probeMap.method == "var") #
                exprs = sapply(1:length(reps), function(x) var(elist$E[reps[x], #
                  ]))#
            else if (probeMap.method == "sum") #
                exprs = rowSums(elist$E[reps, ])#
            else if (probeMap.method == "iqr") #
                exprs = sapply(1:length(reps), function(x) IQR(elist$E[reps[x], #
                  ]))#
            idx <- reps[which(max(exprs) == exprs)]#
            sel = c(sel, idx[1])#
        } else sel = c(sel, reps)#
    }#
    elist.filtered = elist[sel, ]#
    rownames(elist.filtered) = ezs#
    return(elist.filtered)#
}#
#
assignInNamespace("mapProbesIntoEntrezIDs", mapProbesIntoEntrezIDs, ns="EGSEA")#
#
#--------- path -------##
project <- "~/PP/Microarray/KJ"#
input <- file.path(project, "data")#
output.base <- file.path(project, "output")#
output <- file.path(output.base, "analyse_202103191447")#
img.output <- file.path(output, "figures")#
dat.output <- file.path(output, "data")#
tab.output <- file.path(output, "tables")#
david.output <- file.path(output, "DAVID")#
de.output <- file.path(output, "DE")#
sig.output <- file.path(output, "SigGeneList")#
slides.output <- file.path(output, "slides")#
gsa.output <- file.path(output, "egsea")#
#
if (!file.exists(dat.output)) dir.create(dat.output, recursive = TRUE)#
if (!file.exists(img.output)) dir.create(img.output, recursive = TRUE)#
if (!file.exists(tab.output)) dir.create(tab.output, recursive = TRUE)#
if (!file.exists(david.output)) dir.create(david.output, recursive = TRUE)#
if (!file.exists(de.output)) dir.create(de.output, recursive = TRUE)#
if (!file.exists(sig.output)) dir.create(sig.output, recursive = TRUE)#
if (!file.exists(slides.output)) dir.create(slides.output, recursive = TRUE)#
if (!file.exists(gsa.output)) dir.create(gsa.output, recursive = TRUE)
sampleinfo <- fread(file.path(input, "metadata_strac.txt"))#
sampleinfo <- sampleinfo[-which(sampleinfo$SampleID=="S14"),]
sampleinfo
sampleinfo <- fread(file.path(input, "metadata_strac.txt"))#
sampleinfo <- sampleinfo[-which(sampleinfo$SampleID=="S14"),]
sampleinfo
# transcriptome data#
celFiles <- list.celfiles(file.path(input, "STRAC"), full.names=TRUE, recursive = TRUE)#
rawData <- read.celfiles(celFiles[-6])
sinfo <- copy(sampleinfo)
sinfo
eset <- oligo::rma(rawData)#
#
# add annotation#
eset <- affycoretools::annotateEset(object = eset, x = "hta20transcriptcluster.db")
eset.main <- eset[!is.na(fData(eset)$ENTREZID),]
grp <- factor(sinfo[, Progression])#
design <- model.matrix(~grp)
design
fit <- lmFit(eset.main, design)#
fit <- eBayes(fit)#
#
tab <- topTable(fit, coef=2, number=Inf, adjust="BH")#
setDT(tab, keep.rownames=TRUE)
sinfo
sinfo <- copy(sampleinfo)
sinfo
sampleinfo
q()
#------- library ------##
library(oligo)#
library(affycoretools)#
library(hta20transcriptcluster.db)#
library(data.table)#
library(limma)#
library(compareGroups)#
library(fastICA)#
library(ade4)#
library(EGSEA)#
library(EnhancedVolcano)#
#
# generate contrast names#
contr.fact <- function(xvar, sinfo) {#
    if (!is.character(xvar)) stop("xvar must be a character string.")#
    ind <- match(xvar, colnames(sinfo))#
    if (is.na(ind)) stop(cat(xvar, "not found in", sinfo, ".\n"))#
    fact <- factor(data.frame(sinfo)[,xvar]) #
    l <- levels(fact)#
    nl <- nlevels(fact)#
    #tmp <- apply(combn(nl,2), 2, function(x) c(l[x[2]], l[x[1]]))#
    tmp <- data.frame(rbind(xvar, apply(combn(nl, 2, function(x) l[x]), 2, rev)))#
    colnames(tmp) <- paste0("contrast", 1:ncol(combn(nl,2)))#
    return(tmp)#
}#
#
#------- bubble plot -------##
fct <- function(path2file, sig.level=0.01) {#
    tmp <- data.table::fread(path2file)#
	tmp2 <- tmp[Benjamini<sig.level, c("Category", "Term", "PValue", "Count", "%", "Benjamini")]#
	tmp2[, `:=`(Condition=gsub("CTRLvs|_up|_down|.xls", "", basename(path2file)), side=ifelse(grepl("_up", basename(path2file)), "up", "down"))]#
	return(tmp2)#
}#
#
fct2 <- function(path2file, sig.level=0.01) {#
    tmp <- data.table::fread(path2file)#
	tmp2 <- tmp[Benjamini<sig.level, c("Category", "Term", "PValue", "Genes")]#
	tmp2[, `:=`(Condition=gsub("CTRLvs|_up|_down|.xls", "", basename(path2file)), side=ifelse(grepl("_up", basename(path2file)), "up", "down"))]#
	return(tmp2)#
}#
#
# #
mapProbesIntoEntrezIDs <- function (elist, probe.annot, probeMap.method) {#
    ezs = unique(probe.annot[, 2])#
    sel = c()#
    for (ez in ezs) {#
        reps = which(probe.annot[, 2] == ez)#
        if (length(reps) > 1) {#
            if (probeMap.method == "avg") #
                exprs = rowMeans(elist$E[reps, ])#
            else if (probeMap.method == "med") #
                exprs = sapply(1:length(reps), function(x) median(elist$E[reps[x], #
                  ]))#
            else if (probeMap.method == "var") #
                exprs = sapply(1:length(reps), function(x) var(elist$E[reps[x], #
                  ]))#
            else if (probeMap.method == "sum") #
                exprs = rowSums(elist$E[reps, ])#
            else if (probeMap.method == "iqr") #
                exprs = sapply(1:length(reps), function(x) IQR(elist$E[reps[x], #
                  ]))#
            idx <- reps[which(max(exprs) == exprs)]#
            sel = c(sel, idx[1])#
        } else sel = c(sel, reps)#
    }#
    elist.filtered = elist[sel, ]#
    rownames(elist.filtered) = ezs#
    return(elist.filtered)#
}#
#
assignInNamespace("mapProbesIntoEntrezIDs", mapProbesIntoEntrezIDs, ns="EGSEA")#
#
#--------- path -------##
project <- "~/PP/Microarray/KJ"#
input <- file.path(project, "data")#
output.base <- file.path(project, "output")#
output <- file.path(output.base, "analyse_202103231306")#
img.output <- file.path(output, "figures")#
dat.output <- file.path(output, "data")#
tab.output <- file.path(output, "tables")#
david.output <- file.path(output, "DAVID")#
de.output <- file.path(output, "DE")#
sig.output <- file.path(output, "SigGeneList")#
slides.output <- file.path(output, "slides")#
gsa.output <- file.path(output, "egsea")#
#
if (!file.exists(dat.output)) dir.create(dat.output, recursive = TRUE)#
if (!file.exists(img.output)) dir.create(img.output, recursive = TRUE)#
if (!file.exists(tab.output)) dir.create(tab.output, recursive = TRUE)#
if (!file.exists(david.output)) dir.create(david.output, recursive = TRUE)#
if (!file.exists(de.output)) dir.create(de.output, recursive = TRUE)#
if (!file.exists(sig.output)) dir.create(sig.output, recursive = TRUE)#
if (!file.exists(slides.output)) dir.create(slides.output, recursive = TRUE)#
if (!file.exists(gsa.output)) dir.create(gsa.output, recursive = TRUE)
#------------ load data -----------##
# sample data#
sampleinfo <- fread(file.path(input, "metadata_strac.txt"))#
sampleinfo <- sampleinfo[-which(sampleinfo$SampleID=="S18"),]
sampleinfo
celFiles <- list.celfiles(file.path(input, "STRAC"), full.names=TRUE, recursive = TRUE)
celFiles
sampleinfo
sampleinfo <- fread(file.path(input, "metadata_strac.txt"))#
sampleinfo <- sampleinfo[-which(sampleinfo$SampleID=="S18"),]
sampleinfo
rawData <- read.celfiles(celFiles[-9])#
#
# write raw data to rds#
saveRDS(rawData, file.path(dat.output, "rawData.rds"))#
##
png(file=file.path(img.output, "boxplot_raw.png"), height=300, width=800, res=80)#
boxplot(rawData, target ="core", main="core gene, raw intensities", las=3)#
dev.off()#
#
#------------------------------------------------------------------------------##
# normalization at core level#
eset <- oligo::rma(rawData)#
#
# add annotation#
eset <- affycoretools::annotateEset(object = eset, x = "hta20transcriptcluster.db")#
#
# save normalised data to rds#
saveRDS(eset, file.path(dat.output, "normData_core.rds"))#
#eset <- readRDS(file.path(dat.output, "normData_core.rds"))#
# filter not annotated probes#
eset.main <- eset[!is.na(fData(eset)$ENTREZID),]#
saveRDS(eset.main, file.path(dat.output, "normData_core_entrez.rds"))#
#
png(file=file.path(img.output, "boxplot_norm.png"), height=300, width=800, res=80)#
boxplot(eset, main="normalised intensities", las = 3)#
dev.off()#
#
png(file=file.path(img.output, "boxplot_normfilter.png"), height=300, width=800, res=80)#
boxplot(eset.main, main="normalised & filtered intensities", las = 3)#
dev.off()#
#--------------------------- unsupervised analysis ----------------------------##
set.seed(1234)#
ica.res <- fastICA(X=exprs(eset.main), #
            n.comp=ncol(eset.main), #
            alg.typ = "parallel", #
            fun = "logcosh", #
            alpha = 1.0, #
            method = "C", #
            verbose = TRUE)#
A1 <- ica.res$A#
colnames(A1) <- gsub("_\\(HTA-2_0\\)\\.CEL", "", colnames(exprs(eset.main)))#
#
saveRDS(ica.res, file.path(dat.output, "ica_eset.rds"))#
#ica.res <- readRDS(file.path(dat.output, "ica_eset.rds"))#
#
# heamap of the mixing matrix#
png(file=file.path(img.output, "heatmap_A_eset.png"), height = 800, width = 800, res = 80)#
pheatmap::pheatmap(A1, clustering_method = "ward.D2")#
dev.off()
datapca.norm <- dudi.pca(t(exprs(eset.main)), scannf=FALSE, nf=3, scale=TRUE, center=TRUE)#
percentVar <- round(100*datapca.norm$eig/sum(datapca.norm$eig), 2)#
png(file.path(img.output, "pca_norm.png"), width=600, height=600, res=80)#
s.class(datapca.norm$li, fac=factor(sinfo$Treatment), col=1:2, possub = "bottomright",#
        sub=paste0("axis 1: ", percentVar[1], "%, axis 2: ", percentVar[2], "%"),#
        cpoint = 3)#
#s.label(datapca.norm$li, boxes=FALSE, add.plot=TRUE)#
dev.off()
sinfo <- copy(sampleinfo)
png(file.path(img.output, "pca_norm.png"), width=600, height=600, res=80)#
s.class(datapca.norm$li, fac=factor(sinfo$Treatment), col=1:2, possub = "bottomright",#
        sub=paste0("axis 1: ", percentVar[1], "%, axis 2: ", percentVar[2], "%"),#
        cpoint = 3)#
#s.label(datapca.norm$li, boxes=FALSE, add.plot=TRUE)#
dev.off()
grp <- factor(sinfo[, Progression])#
design <- model.matrix(~grp)#
#
fit <- lmFit(eset.main, design)#
fit <- eBayes(fit)
tab <- topTable(fit, coef=2, number=Inf, adjust="BH")#
setDT(tab, keep.rownames=TRUE)
tab
fwrite(tab, file=file.path(de.output, "DE_progression1.vs.progression0.xls"))
fwrite(tab, file=file.path(de.output, "DE_progression1.vs.progression0.xls"), sep="\t")
egsea.output <- file.path(gsa.output, paste0("egsea_",format(Sys.time(), '%Y%m%d%H%M')))#
if (!file.exists(egsea.output)) dir.create(egsea.output)#
#
#dat #
dat <- exprs(eset.main)#
colnames(dat) <- gsub("_\\(HTA-2_0\\)\\.CEL", "", colnames(dat))#
probe.annots <- fData(eset.main)#
colnames(probe.annots) <- c("ProbeID", "EntrezID", "Symbol", "Genename")
gs.annots <- buildIdx(entrezIDs=unique(probe.annots[,2]), species="human", msigdb.gsets = c("h", "c6"))
design <- model.matrix(~0+grp)#
colnames(design) <- levels(grp)
design
paste0("Progression", levels(grp))
colnames(design) <- paste0("Progression", levels(grp))
contrast.matrix <- makeContrasts(Progression1-Progression0,#
                                 levels=design)#
#
egsea.res <- egsea.ma(expr = dat, #
                    group = grp, #
                    probe.annot = probe.annots, #
                    probeMap.method = "avg", #
                    design = design,#
                    contrasts = contrast.matrix, #
                    gs.annots = gs.annots, #
                    baseGSEAs = egsea.base(),#
                    display.top = 20,#
                    verbose = TRUE,#
                    report = TRUE,#
                    report.dir = egsea.output)
library(RepSeq)
datatab <- readRDS("~/PP/RepSeq/VQ/data/test/datatabBanalyse_LBA_COVID_tetramer_beta.rds")
datatab
sData(datatab)
unique(assay(datatab)$lib)
abc <- toDESeq2(datatab, conditions="Sex", level="VpJ")
class(sData(datatab))
sData(datatab)$Sex
?data.frame
x
x <- datatab
conditions
conditions <- "Sexe"
level <- "V"
coldat <- sData(x)[, conditions, drop=FALSE]#
    coldat <- apply(coldat, 2, function(x) gsub("\ ", ".", x)) # replace blank characters by "dot"#
    coldat <- apply(coldat, 2, function(x) gsub("\\+", "p", x)) # replace + by "p"#
    coldat <- apply(coldat, 2, function(x) gsub("\\-", "m", x)) # replace - by "m"#
    levelChoice <- match.arg(level)
coldat
levelChoice <- "V"
cts <- countFeatures(x, level=levelChoice)
cts
if (length(conditions) > 1) conditions <- paste(conditions, collapse="+")#
    rownames(coldat) <- gsub("-", ".", rownames(coldat))
coldat
cts <- data.frame(cts, row.names=1, check.names=FALSE)
cts
colnames(cts) <- gsub("-", ".", colnames(cts))
cts
cts <- cts[, match(rownames(coldat),colnames(cts))]
cts
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cts, colData = coldat, design = as.formula(paste0("~" ,conditions)))
rm(condtions)
rm(conditions)
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cts, colData = coldat, design = as.formula(paste0("~" ,conditions)))
cts
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cts, colData = coldat, design = ~Sexe)
dds
vsd <- DESeq2::varianceStabilizingTransformation(dds)
datapca <- DESeq2::plotPCA(vsd, intgroup="Sexe", returnData=TRUE)
datapca
percentVar <- round(100 * attr(datapca, "percentVar"))
?phyloseq
library(phyloseq)
?phyloseq
ordinate
?decordana
library(vegan)
.decordana
?decordana
decorana
?decorana
data(varespec)
varespec
vare.dca <- decorana(varespec)
vare.dca
names(vare.dca)
vare.dca$rproj
summary(vare.dca)
plot(vare.dca)
scores(vare.dca)
data(iris)
head(iris, 3)
library(umap)
iris.umap = umap(iris.data)
iris.data = iris[, grep("Sepal|Petal", colnames(iris))]#
iris.labels = iris[, "Species"]
iris.data
iris.umap = umap(iris.data)
iris.umap
plot.iris(iris.umap, iris.labels)
plot(iris.umap, iris.labels)
iris.umap
plot(iris.umap)
q()
BiocManager::install()
BiocManager::install("processx")
q()
BiocManager::install(à)
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
BiocManager::install()
q()
library(phyloseq)#
library(officer)#
library(customLayout)#
library(ggplot2)#
library(ggpubr)#
library(vegan)#
library(directlabels)#
library(data.table)#
library(dendextend)#
library(DESeq2)#
library(IHW)#
library(RColorBrewer)
BiocManager::install("customLayout")
library(devtools)#
install_github("zzawadz/customLayout")
library(customLayout)
source("~/PP/Microbiome/VQ/prog/functions.R")#
#
#------------ path ----------##
project <- "~/PP/Microbiome/VQ2"#
input <- file.path(project, "qiime2_20200814")#
report <- file.path(input, "report")#
output <- file.path(report, "output_2009222148")#
img.output <- file.path(output, "figures")#
tab.output <- file.path(output, "tables")#
data.output <- file.path(output, "data")#
count.output <- file.path(data.output, "counts")#
norm.output <- file.path(data.output, "normdata")#
if (!file.exists(img.output)) dir.create(img.output, recursive = TRUE)#
if (!file.exists(tab.output)) dir.create(tab.output, recursive = TRUE)#
if (!file.exists(norm.output)) dir.create(norm.output, recursive = TRUE)#
if (!file.exists(count.output)) dir.create(count.output, recursive = TRUE)#
#
#----------- load data -------------------##
ps <- phyloseq::import_biom(file.path(input, "export", "otu_dada2_table_gg.biom"))#
phy_tree(ps) <- ape::multi2di(read_tree(file.path(input, "export", "dada2", "rooted_tree.nwk")))#
# Show available ranks in the dataset#
rank_names(ps) #
colnames(tax_table(ps)) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")#
# Create table, number of features for each phyla#
tax_table(ps) <- apply(tax_table(ps), 2, function(x) gsub("D_0__|D_1__|D_2__|D_3__|D_4__|D_5__|D_6__|D_7__", "", x))#
tax_table(ps) <- apply(tax_table(ps), 2, function(x) gsub("k__|p__|c__|o__|f__|g__|s__", "", x))#
ps <- subset_taxa(ps, !is.na(Phylum) & !Phylum %in% c("", "uncharacterized"))#
batch <- factor(data.frame(sample_data(ps))[, "run"])#
indx <- do.call("cbind", by(t(as.data.frame(otu_table(ps))) > 0, batch, colSums))#
indx2 <- rowSums(indx > 0) == 2 #
keepTaxa <- names(indx2)[which(indx2 == TRUE)]#
ps <- prune_taxa(keepTaxa, ps)#
sample_data(ps)$status <- paste0(sample_data(ps)$time, sample_data(ps)$group)#
pptx.append <- TRUE
?pdf
source("~/PP/Microbiome/VQ/prog/makefigures.R")
output
comparisons <- list(c("iso.PBS", "iso.metoprolol"), #
    c("iso.PBS", "iso.propanolol"), #
    c("iso.PBS", "iso.clenbuterol"), #
    c("iso.PBS", "iso.ICI.low"),#
    c("iso.PBS", "iso.ICI.high"),#
    c("combo.PBS", "combo.meto"),#
    c("combo.PBS", "combo.propanolol"),#
    c("combo.PBS", "combo.clenbuterol"),#
    c("combo.PBS", "combo.ICI.low"),#
    c("combo.PBS", "combo.ICI.high"))
i <- 1
grp <- comparisons[[i]]#
    cat(grp, "...\n")
ps.tmp <- subset_samples(ps, group %in% grp & time %in% "T1")#
    sample_data(ps.tmp)$group <- factor(sample_data(ps.tmp)$group, levels=grp)#
    xvar <- "group"#
    indx <- rowSums(otu_table(ps.tmp) == 0) == nsamples(ps.tmp)#
    keepTaxa <- names(indx[indx == FALSE])#
    ps.in <- prune_taxa(keepTaxa, ps.tmp)#
    outputdir <- file.path(output, paste0(grp, collapse="_"))
outputdir
source("~/PP/Microbiome/VQ/prog/makefigures.R")
if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)
makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=FALSE)
source("~/PP/Microbiome/VQ/prog/makefigures.R")
makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=FALSE)
makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
gsub("\ |[vs]|-", "", pptx.title)
pptx.title=paste0(grp, collapse="_")
pptx.title
gsub("\ |[vs]|-", "", pptx.title)
subgrp <- gsub("\ |vs|-", "", pptx.title)
subgrp
source("~/PP/Microbiome/VQ/prog/makefigures.R")
?pdf
source("~/PP/Microbiome/VQ/prog/makefigures.R")
outputdir <- file.path(output, paste0(grp, collapse="_"))#
    if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)
outputdir
makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
source("~/PP/Microbiome/VQ/prog/makefigures.R")
outputdir <- file.path(output, paste0(grp, collapse="_"))#
    if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
?ggsave
source("~/PP/Microbiome/VQ/prog/makefigures.R")
if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
source("~/PP/Microbiome/VQ/prog/makefigures.R")
if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
source("~/PP/Microbiome/VQ/prog/makefigures.R")
if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
source("~/PP/Microbiome/VQ/prog/makefigures.R")
if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)
for (i in 1:length(comparisons)) {#
    grp <- comparisons[[i]]#
    cat(grp, "...\n")#
    ps.tmp <- subset_samples(ps, group %in% grp & time %in% "T1")#
    sample_data(ps.tmp)$group <- factor(sample_data(ps.tmp)$group, levels=grp)#
    xvar <- "group"#
    indx <- rowSums(otu_table(ps.tmp) == 0) == nsamples(ps.tmp)#
    keepTaxa <- names(indx[indx == FALSE])#
    ps.in <- prune_taxa(keepTaxa, ps.tmp)#
    outputdir <- file.path(output, paste0(grp, collapse="_"))#
    if (!file.exists(outputdir)) dir.create(outputdir, recursive=TRUE)#
    makefigures(ps.in, #
        p.pct=30, #
        p.level=0.05, #
        output.dir=outputdir, #
        pptx.title=paste0(grp, collapse="_"), #
        pptx.subtitle= "", #
        fig.out=TRUE)#
    rm(ps.in, xvar, ps.tmp, indx, keepTaxa, outputdir)#
}
q()
?warnings()
library(data.table)
tmp <- fread("~/Downloads/sra_result.csv")
tmp
q()
library(RepSeq)
datatab <- readRDS("~/PP/RepSeq/LBA/datatabBanalyse_LBA_COVID_BETA.rds")
datatab
sData(datatab)
sData(datatab)$Sex
?toDEseq2
?toDESeq2
abc <- toDESeq2(datatab, "Sexe", level="VJ")
cts <- assay(datatab)
cts
rownames(sData(datatab))
x <- copy(datatab)
x
coldat <- sData(x)[, "Sexe", drop=FALSE]
coldat
coldat <- apply(coldat, 2, function(x) gsub("\ ", ".", x)) # replace blank characters by "dot"#
    coldat <- apply(coldat, 2, function(x) gsub("\\+", "p", x)) # replace + by "p"#
    coldat <- apply(coldat, 2, function(x) gsub("\\-", "m", x)) # replace - by "m"
coldat
levelChoice <- "VJ"
cts <- countFeatures(x, level=levelChoice)
cts
rownames(coldat) <- gsub("-", ".", rownames(coldat))
coldat
coldat <- sData(x)[, "Sexe", drop=FALSE]
coldat <- apply(coldat, 2, function(x) gsub("\ ", ".", x)) # replace blank characters by "dot"#
    coldat <- apply(coldat, 2, function(x) gsub("\\+", "p", x)) # replace + by "p"#
    coldat <- apply(coldat, 2, function(x) gsub("\\-", "m", x)) # replace - by "m"
coldat
cts <- data.frame(cts, row.names=1, check.names=FALSE)
cts
head(cts)
cts <- cts[, match(rownames(coldat),colnames(cts))]
cts
conditions <- "Sexe"
dds <- DESeq2::DESeqDataSetFromMatrix(countData = cts, colData = coldat, design = as.formula(paste0("~" ,conditions)))
dds
q()
#install.packages("devtools")#
library("devtools")#
#devtools::install_github("klutometis/roxygen")#
library(roxygen2)#
#
#---------------- load the path where the package will be stored ------------##
#setwd("~/PP/devel")#
#devtools::create("RepSeq")#
#
setwd("~/PP/github/RepSeq")#
#
# add packages to DESCRIPTION#
usethis::use_package("data.table", type="Depends")#
usethis::use_package("ggplot2", type="Imports")#
usethis::use_package("pbapply", type="Imports")#
usethis::use_package("parallel", type="Imports")#
usethis::use_package("pheatmap", type="Imports")#
usethis::use_package("utils", type="Imports")#
usethis::use_package("stats", type="Imports")#
usethis::use_package("methods", type="Imports")#
usethis::use_package("graphics", type="Imports")#
usethis::use_package("DESeq2", type="Imports")#
usethis::use_package("Rcpp", type="Imports")#
usethis::use_package("ade4", type="Imports")#
usethis::use_package("limma", type="Imports")#
usethis::use_package("naturalsort", type="Imports")#
usethis::use_package("scales", type="Imports")#
usethis::use_package("vegan", type="Imports")#
#usethis::use_package("GMPR", type="Imports")#
#devtools::use_vignette("RepSeq")#
#
# create Rd and NAMESPACE#
setwd("~/PP/github/RepSeq")#
use_rcpp()#
roxygenize(clean=TRUE)#
#document()#
setwd("..")
# Build package#
setwd("~/PP/github/RepSeq")#
build(pkg = ".", path = "~/PP/github", binary = FALSE, vignettes = FALSE, manual = FALSE, args = NULL, quiet = FALSE)
q()
